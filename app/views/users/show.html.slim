body
  = render partial: "layouts/nav"
  
  .frame
    h2
      = link_to image_tag("arrow_back.png", alt: "Arrow back", size: "35x35"), 'javascript:history.back()'
      = @user.name
    br

    .relative
      p = image_tag(current_user.header, class: "header")
      p = image_tag(current_user.icon, class: "icon_image absolute", size: "240x240")
      = link_to 'プロフィールを編集', edit_user_path(current_user.id), class: "edit"

    br
    br
    br
    br

    p
      strong
        = @user.name

    p = @user.profile

    = image_tag("location.png", size: "15x15")
    span.space
      = @user.place
    = image_tag("link.png", size: "15x15")
    span.space.link
      = text_url_to_link(@user.website).html_safe
    = image_tag("cake.png", size: "15x15")
    | 誕生日: 
    span.space
      = @user.birthday.strftime('%Y年%m月%d日')

  .tabs
    ul.nav.nav-tabs.nav-fill.sticky-top.blur-bg
      li.nav-item
        div class="#{'active' if params[:tab] == 'tweet'} text-center hover-bg py-3 px-2" type="button" data-bs-toggle="tab" data-bs-target="#tweet"
          = link_to 'ツイート', user_path(@user.id, tab: 'tweet'), class: 'link'
      li.nav-item
        div class="#{'active' if params[:tab] == 'favorite'} text-center hover-bg py-3 px-2" type="button" data-bs-toggle="tab" data-bs-target="#favorite"
          = link_to 'いいね', user_path(@user.id, tab: 'favorite'), class: 'link'
      li.nav-item
        div class="#{'active' if params[:tab] == 'retweet'} text-center hover-bg py-3 px-2" type="button" data-bs-toggle="tab" data-bs-target="#retweet"
          = link_to 'リツイート', user_path(@user.id, tab: 'retweet'), class: 'link'
      li.nav-item
        div class="#{'active' if params[:tab] == 'comment'} text-center hover-bg py-3 px-2" type="button" data-bs-toggle="tab" data-bs-target="#comment"
          = link_to 'コメント', user_path(@user.id, tab: 'comment'), class: 'link'

    .tab-content
      div class="#{'show active' if params[:tab] == 'tweet'} tab-pane fade " id="tweet"
        - @tweets.each do |tweet|
          = link_to tweet_path(tweet.id) do
            - if tweet.retweets.exists?(user: current_user)
              ul
                li
                  = image_tag('repost.png', size: '20x20', class: 'titled_repost')
                  object = link_to 'あなたがリポストしました', user_path(current_user.id)
            ul
              li
                object = link_to image_tag(tweet.user.icon, alt: "Icon image", class: "icon_image", size: '50x50'), profile_path(tweet.user.id)
              li 
                object = link_to tweet.user.name, profile_path(tweet.user.id), class: 'link'
              li 投稿日： #{tweet.created_at.strftime('%Y/%m/%d %H:%M:%S')}
              - if current_user.present?
                - room_with_tweet_user = check_rooms(tweet.user)
              - if current_user.present? && tweet.user.name.include?(current_user.name)
                li.dropdown
                  | ... 
              - elsif current_user.present? && tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{tweet.user.name}さんのフォローを解除する", unfollow_user_path(tweet.user), data: {turbo_method: :delete}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{tweet.user.name}さんにメッセージを送る", rooms_path(user_id: tweet.user.id), data: {turbo_method: :post}
              - elsif current_user.present? && !tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{tweet.user.name}さんをフォロー", follow_user_path(weet.user), data: {turbo_method: :post}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{tweet.user.name}さんにメッセージを送る", rooms_path(user_id: tweet.user.id), data: {turbo_method: :post}
            p = tweet.content
            - if tweet.images.attached?
              - tweet.images.each do |tweet_image|
                = image_tag tweet_image, size: '250x200', class: "tweet_image"
          end
          .icons
            .comment
              = link_to image_tag('comment.png', size: '26x26', class: "balloon"), tweet_path(tweet.id)
              = tweet.comments.length
            .repost
              - if current_user.present? && tweet.retweets.exists?(user: current_user)
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweet_path(tweet_id: tweet.id, id: tweet.retweets.find_by(user: current_user).id), data: {turbo_method: :delete}
                = tweet.retweets.length
              - else
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweets_path(tweet_id: tweet.id), data: {turbo_method: :post}
                = tweet.retweets.length
            .favorite
              - if current_user.present? && tweet.favorites.exists?(user: current_user)
                = link_to image_tag('heart.png', size: '32x32'), tweet_favorite_path(tweet_id: tweet.id, id: tweet.favorites.find_by(user: current_user).id), data: {turbo_method: :delete}
                = tweet.favorites.length
              - else
                = link_to image_tag('heart_with_hole.png', size: '32x32'), tweet_favorites_path(tweet_id: tweet.id), data: {turbo_method: :post}
                = tweet.favorites.length
            .bookmark
              - if current_user.present? && tweet.bookmarks.exists?(user: current_user)
                = link_to image_tag('bookmarked.png', size: '20x20'), tweet_bookmark_path(tweet_id: tweet.id, id: tweet.bookmarks.find_by(user: current_user).id), data: {turbo_method: :delete}
              - else
                = link_to image_tag('not_bookmark.png', size: '20x20'), tweet_bookmarks_path(tweet_id: tweet.id), data: {turbo_method: :post}
          hr
        
      div class="#{'show active' if params[:tab] == 'favorite'} tab-pane fade " id="favorite"
        - @favorites.each do |favorite|
          = link_to tweet_path(favorite.tweet_id) do
            - if favorite.tweet.retweets.exists?(user: current_user)
              ul
                li
                  = image_tag('repost.png', size: '20x20', class: 'titled_repost')
                  object = link_to 'あなたがリポストしました', user_path(current_user.id)
            ul
              li
                object = link_to image_tag(favorite.tweet.user.icon, alt: "Icon image", class: "icon_image", size: '50x50'), profile_path(favorite.tweet.user.id)
              li 
                object = link_to favorite.tweet.user.name, profile_path(favorite.tweet.user.id), class: 'link'
              li 投稿日： #{favorite.tweet.created_at.strftime('%Y/%m/%d %H:%M:%S')}
              - if current_user.present?
                - room_with_tweet_user = check_rooms(favorite.tweet.user)
              - if current_user.present? && favorite.tweet.user.name.include?(current_user.name)
                li.dropdown
                  | ... 
              - elsif current_user.present? && favorite.tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{favorite.tweet.user.name}さんのフォローを解除する", unfollow_user_path(favorite.tweet.user), data: {turbo_method: :delete}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{favorite.tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{favorite.tweet.user.name}さんにメッセージを送る", rooms_path(user_id: favorite.tweet.user.id), data: {turbo_method: :post}
              - elsif current_user.present? && !favorite.tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{favorite.tweet.user.name}さんをフォロー", follow_user_path(favorite.tweet.user), data: {turbo_method: :post}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{favorite.tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{favorite.tweet.user.name}さんにメッセージを送る", rooms_path(user_id: favorite.tweet.user.id), data: {turbo_method: :post}
            p = favorite.tweet.content
            - if favorite.tweet.images.attached?
              - favorite.tweet.images.each do |tweet_image|
                = image_tag tweet_image, size: '250x200', class: "tweet_image"
          end
          .icons
            .comment
              = link_to image_tag('comment.png', size: '26x26', class: "balloon"), tweet_path(favorite.tweet_id)
              = favorite.tweet.comments.length
            .repost
              - if current_user.present? && favorite.tweet.retweets.exists?(user: current_user)
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweet_path(tweet_id: favorite.tweet.id, id: favorite.tweet.retweets.find_by(user: current_user).id), data: {turbo_method: :delete}
                = favorite.tweet.retweets.length
              - else
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweets_path(tweet_id: favorite.tweet.id), data: {turbo_method: :post}
                = favorite.tweet.retweets.length
            .favorite
              - if current_user.present? && favorite.tweet.favorites.exists?(user: current_user)
                = link_to image_tag('heart.png', size: '32x32'), tweet_favorite_path(tweet_id: favorite.tweet_id, id: favorite.tweet.favorites.find_by(user: current_user).id), data: {turbo_method: :delete}
                = favorite.tweet.favorites.length
              - else
                = link_to image_tag('heart_with_hole.png', size: '32x32'), tweet_favorites_path(tweet_id: favorite.tweet_id), data: {turbo_method: :post}
                = favorite.tweet.favorites.length
            .bookmark
              - if current_user.present? && favorite.tweet.bookmarks.exists?(user: current_user)
                = link_to image_tag('bookmarked.png', size: '20x20'), tweet_bookmark_path(tweet_id: favorite.tweet.id, id: favorite.tweet.bookmarks.find_by(user: current_user).id), data: {turbo_method: :delete}
              - else
                = link_to image_tag('not_bookmark.png', size: '20x20'), tweet_bookmarks_path(tweet_id: favorite.tweet.id), data: {turbo_method: :post}
          hr

      div class="#{'show active' if params[:tab] == 'retweet'} tab-pane fade " id="retweet"
        - @retweets.each do |retweet|
          = link_to tweet_path(retweet.tweet_id)
            - if retweet.present?
              ul
                li
                  = image_tag('repost.png', size: '20x20', class: 'titled_repost')
                  object = link_to 'あなたがリポストしました', user_path(current_user.id)
            ul
              li
                object = link_to image_tag(retweet.tweet.user.icon, alt: "Icon image", class: "icon_image", size: '50x50'), profile_path(retweet.tweet.user.id)
              li 
                object = link_to retweet.tweet.user.name, profile_path(retweet.tweet.user.id), class: 'link'
              li 投稿日： #{retweet.tweet.created_at.strftime('%Y/%m/%d %H:%M:%S')}
              - if current_user.present?
                - room_with_tweet_user = check_rooms(retweet.tweet.user)
              - if current_user.present? && retweet.tweet.user.name.include?(current_user.name)
                li.dropdown
                  | ... 
              - elsif current_user.present? && retweet.tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{retweet.tweet.user.name}さんのフォローを解除する", unfollow_user_path(retweet.tweet.user), data: {turbo_method: :delete}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{retweet.tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{retweet.tweet.user.name}さんにメッセージを送る", rooms_path(user_id: retweet.tweet.user.id), data: {turbo_method: :post}
              - elsif current_user.present? && !retweet.tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{retweet.tweet.user.name}さんをフォロー", follow_user_path(retweet.tweet.user), data: {turbo_method: :post}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{retweet.tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{retweet.tweet.user.name}さんにメッセージを送る", rooms_path(user_id: retweet.tweet.user.id), data: {turbo_method: :post}
            p = retweet.tweet.content
            - if retweet.tweet.images.attached?
              - retweet.tweet.images.each do |tweet_image|
                = image_tag tweet_image, size: '250x200', class: "tweet_image"
          end
          .icons
            .comment
              = link_to image_tag('comment.png', size: '26x26', class: "balloon"), tweet_path(retweet.tweet_id)
              = retweet.tweet.comments.length
            .repost
              - if current_user.present? && retweet.present?
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweet_path(tweet_id: retweet.tweet.id, id: retweet.tweet.retweets.find_by(user: current_user).id), data: {turbo_method: :delete}
                = retweet.tweet.retweets.length
              - else
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweets_path(tweet_id: retweet.tweet.id), data: {turbo_method: :post}
                = retweet.tweet.retweets.length
            .favorite
              - if current_user.present? && retweet.tweet.favorites.exists?(user: current_user)
                = link_to image_tag('heart.png', size: '32x32'), tweet_favorite_path(tweet_id: retweet.tweet_id, id: retweet.tweet.favorites.find_by(user: current_user).id), data: {turbo_method: :delete}
                = retweet.tweet.favorites.length
              - else
                = link_to image_tag('heart_with_hole.png', size: '32x32'), tweet_favorites_path(tweet_id: retweet.tweet_id), data: {turbo_method: :post}
                = retweet.tweet.favorites.length
            .bookmark
              - if current_user.present? && retweet.tweet.bookmarks.exists?(user: current_user)
                = link_to image_tag('bookmarked.png', size: '20x20'), tweet_bookmark_path(tweet_id: retweet.tweet.id, id: retweet.tweet.bookmarks.find_by(user: current_user).id), data: {turbo_method: :delete}
              - else
                = link_to image_tag('not_bookmark.png', size: '20x20'), tweet_bookmarks_path(tweet_id: retweet.tweet.id), data: {turbo_method: :post}
          hr

      div class="#{'show active' if params[:tab] == 'comment'} tab-pane fade " id="comment"
        - @comments.each do |comment|
          = link_to tweet_path(comment.tweet_id)
            - if comment.tweet.retweets.exists?(user: current_user)
              ul
                li
                  = image_tag('repost.png', size: '20x20', class: 'titled_repost')
                  object = link_to 'あなたがリポストしました', user_path(current_user.id)
            ul
              li
                object = link_to image_tag(comment.tweet.user.icon, alt: "Icon image", class: "icon_image", size: '50x50'), profile_path(comment.tweet.user.id)
              li 
                object = link_to comment.tweet.user.name, profile_path(comment.tweet.user.id), class: 'link'
              li 投稿日： #{comment.tweet.created_at.strftime('%Y/%m/%d %H:%M:%S')}
              - if current_user.present?
                - room_with_tweet_user = check_rooms(comment.tweet.user)
              - if current_user.present? && comment.tweet.user.name.include?(current_user.name)
                li.dropdown
                  | ... 
              - elsif current_user.present? && comment.tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{comment.tweet.user.name}さんのフォローを解除する", unfollow_user_path(comment.tweet.user), data: {turbo_method: :delete}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{comment.tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{comment.tweet.user.name}さんにメッセージを送る", rooms_path(user_id: comment.tweet.user.id), data: {turbo_method: :post}
              - elsif current_user.present? && !comment.tweet.user.followers.pluck(:user_id).include?(current_user.id)
                li.dropdown
                  | ... 
                  ul.sub-list
                    li.sub
                      object
                        = link_to "#{comment.tweet.user.name}さんをフォロー", follow_user_path(comment.tweet.user), data: {turbo_method: :post}
                        br
                        - if room_with_tweet_user.present? # 既に２人のチャットルームがある場合
                          = link_to "#{comment.tweet.user.name}さんにメッセージを送る", room_path(room_with_tweet_user)
                        - else # ２人のチャットルームが無くて作成が必要な場合
                          = link_to "#{comment.tweet.user.name}さんにメッセージを送る", rooms_path(user_id: comment.tweet.user.id), data: {turbo_method: :post}
            p = comment.tweet.content
            - if comment.tweet.images.attached?
              - comment.tweet.images.each do |tweet_image|
                = image_tag tweet_image, size: '250x200', class: "tweet_image"
          end
          .icons
            .comment
              = link_to image_tag('comment.png', size: '26x26', class: "balloon"), tweet_path(comment.tweet_id)
              = comment.tweet.comments.length
            .repost
              - if current_user.present? && comment.tweet.retweets.exists?(user: current_user)
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweet_path(tweet_id: comment.tweet.id, id: comment.tweet.retweets.find_by(user: current_user).id), data: {turbo_method: :delete}
                = comment.tweet.retweets.length
              - else
                = link_to image_tag('repost.png', size: '26x26', class: "circled_arrow"), tweet_retweets_path(tweet_id: comment.tweet.id), data: {turbo_method: :post}
                = comment.tweet.retweets.length
            .favorite
              - if current_user.present? && comment.tweet.favorites.exists?(user: current_user)
                = link_to image_tag('heart.png', size: '32x32'), tweet_favorite_path(tweet_id: comment.tweet_id, id: comment.tweet.favorites.find_by(user: current_user).id), data: {turbo_method: :delete}
                = comment.tweet.favorites.length
              - else
                = link_to image_tag('heart_with_hole.png', size: '32x32'), tweet_favorites_path(tweet_id: comment.tweet_id), data: {turbo_method: :post}
                = comment.tweet.favorites.length
            .bookmark
              - if current_user.present? && comment.tweet.bookmarks.exists?(user: current_user)
                = link_to image_tag('bookmarked.png', size: '20x20'), tweet_bookmark_path(tweet_id: comment.tweet.id, id: comment.tweet.bookmarks.find_by(user: current_user).id), data: {turbo_method: :delete}
              - else
                = link_to image_tag('not_bookmark.png', size: '20x20'), tweet_bookmarks_path(tweet_id: comment.tweet.id), data: {turbo_method: :post}
          hr

